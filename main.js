!function(){"use strict";class e{#e;#t;#s;#r;#o;#a;#i;#n;#l;#d;#c;#h;#u;#m;#_;#v;#E;#L;constructor(e,t,s,r,o,a){this.#t=e.link,this.#e=e.name,this.#s=e._id,this.#r=e.owner._id,this.#o=t,this.#l=s,this.#v=r,this.#E=o,this.#L=a,this.#a=e.likes,this.#i=this.#a.length,this.#n=this.#a.some((e=>{e._id,this.#o}))}#k(){this.#d=document.querySelector(this.#l).content.querySelector(".card").cloneNode(!0),this.#c=this.#d.querySelector(".card__image"),this.#h=this.#d.querySelector(".card__button-like"),this.setIsLiked(this.#a),this.toggleActiveLike(),this.#u=this.#d.querySelector(".card__like-amount"),this.updateLikeAmount(this.#a),this.#m=this.#d.querySelector(".card__button-delete"),this.#_=this.#d.querySelector(".card__text"),this.#_.textContent=this.#e,this.#c.setAttribute("src",this.#t),this.#c.setAttribute("alt",this.#e)}#p(){this.#c.addEventListener("click",(()=>{this.#v()})),this.#h.addEventListener("click",(()=>{this.toggleActiveLike(),this.#L()})),this.#m.addEventListener("click",(()=>this.#E(this.#s)))}setIsLiked(e){this.#a=e,this.#n=this.#a.some((e=>e._id===this.#o))}updateLikeAmount(e){this.#i=e.length,this.#u.textContent=this.#i}toggleActiveLike(){this.#n?this.#h.classList.add("card__button-like-active"):this.#h.classList.remove("card__button-like-active")}deleteCard(){this.#d.remove(),this.#d=null}getCardElement(){return this.#k(),this.#p(),this.#d}disableDeleteButton(){this.#m.remove()}getCardData(){return{src:this.#t,alt:this.#e,id:this.#s,ownerId:this.#r,isLiked:this.#n,likes:this.#i}}}class t{#S;#b;#f;#g;#C;#y;#B;#I;#q;constructor(e,t){this.#S=t,this.#b=e.formSelector,this.#f=e.inputSelector,this.#g=e.submitButtonSelector,this.#C=e.inactiveButtonClass,this.#y=e.inputErrorClass,this.#B=e.errorClass,this.#I=[...t.querySelectorAll(e.inputSelector)],this.#q=this.#S.querySelector(this.#g)}#A(e){e.validity.valid?this.#x(e):this.#w(e,e.validationMessage)}#w(e,t){const s=this.#S.querySelector(`.${e.id}-error`);e.classList.add(this.#y),s.textContent=t,s.classList.add(this.#B)}#x(e){const t=this.#S.querySelector(`.${e.id}-error`);e.classList.remove(this.#y),t.classList.remove(this.#B),t.textContent=""}#T(){return this.#I.every((e=>e.validity.valid))}#p(){this.#S.addEventListener("submit",(e=>{e.preventDefault()})),this.#S.addEventListener("reset",(()=>{this.toggleSubmitButton()})),this.#I.forEach((e=>{e.addEventListener("input",(()=>{this.#A(e),this.toggleSubmitButton()}))}))}enableValidation(){this.#p()}toggleSubmitButton(){this.#T()?(this.#q.disabled=!1,this.#q.classList.remove(this.#C)):(this.#q.disabled=!0,this.#q.classList.add(this.#C))}}class s{#U;#D;#F;constructor(e,t){let{items:s,renderer:r}=e;this.#U=s,this.#D=r,this.#F=document.querySelector(t)}renderItems(){this.#U.forEach((e=>{this.#D(e)}))}addItem(e){this.#F.prepend(e)}}class r{_modal;_modalCloseButton;constructor(e){this._modal=document.querySelector(e),this._modalCloseButton=this._modal.querySelector(".modal__button-close"),this.close=this.close.bind(this),this.open=this.open.bind(this)}open(){this._modal.classList.add("modal_opened"),document.addEventListener("keydown",this.#N)}close(){this._modal.classList.remove("modal_opened"),document.removeEventListener("keydown",this.#N)}#N=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._modalCloseButton.addEventListener("click",(()=>{this.close()})),this._modal.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class o extends r{#$;#P;#R;#V;#H;constructor(e,t){super(e),this.#$=t,this.#P=this._modal.querySelector(".modal__form"),this.#R=this.#P.querySelector(".modal__button-save"),this.#V=this.#P.querySelectorAll(".modal__form-input"),this.#H=this.#R.textContent}#O(){const e={};return this.#V.forEach((t=>{e[t.name]=t.value})),e}close(){super.close(),this.#P.reset()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this.#R.textContent=e?t:this.#H}setEventListeners(){super.setEventListeners(),this.#P.addEventListener("submit",(e=>{e.preventDefault(),this.#$(this.#O())}))}}const a={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__button-save",inactiveButtonClass:"modal__button-disabled",inputErrorClass:"modal__form-input-invalid",errorClass:"modal__input-error_active"},i=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${res.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}updateUserInfo(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._checkResponse)}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}toggleCardLike(e,t){return t?fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse):fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}updateProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"cec7d967-b84d-4a45-bbb1-45eb7a2c7337","Content-Type":"application/json"}}),n=new class extends r{constructor(e){super(e)}open(e){let{src:t,alt:s}=e;const r=this._modal.querySelector(".modal__image"),o=this._modal.querySelector(".modal__caption");r.src=t,r.alt=s,o.textContent=s,super.open()}}(".modal-picture");n.setEventListeners();const l=new class extends r{#P;#R;#H;constructor(e){super(e),this.#P=this._modal.querySelector(".modal__form"),this.#R=this.#P.querySelector(".modal__button-save"),this.#H=this.#R.textContent}setSubmitHandler(e){this._submitHandler=e}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";this.#R.textContent=e?t:this.#H}setEventListeners(){super.setEventListeners(),this.#P.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()}))}}(".modal-delete");l.setEventListeners();const d=new class{#j;#J;#z;constructor(e){let{userNameSelector:t,userAboutSelector:s,userAvatarSelector:r}=e;this.#j=document.querySelector(t),this.#J=document.querySelector(s),this.#z=document.querySelector(r)}getUserInfo(){return{userName:this.#j.textContent,userAbout:this.#J.textContent}}setUserInfo(e){let{name:t,about:s,avatar:r}=e;this.#j.textContent=t,this.#J.textContent=s,this.#z.src=r,this.#z.alt=t}}({userNameSelector:".profile__title",userAboutSelector:".profile__description",userAvatarSelector:".profile__image"});let c,h;Promise.all([i.getUserInfo(),i.getInitialCards()]).then((e=>{c=e[0]._id;const t=e[0],r=e[1];d.setUserInfo({name:t.name,about:t.about,avatar:t.avatar}),h=new s({items:r,renderer:e=>{h.addItem(b(e))}},".cards__list"),h.renderItems()})).catch((e=>{console.error("Error. The request has failed: ",e)}));const u=new o(".modal-profile",(e=>{u.renderLoading(!0),i.updateUserInfo(e).then((e=>{d.setUserInfo({name:e.name,about:e.about,avatar:e.avatar}),u.close()})).catch((e=>{console.error("Error. The request has failed: ",e)})).finally((()=>{u.renderLoading(!1)}))}));u.setEventListeners();const m=new o(".modal-avatar",(e=>{m.renderLoading(!0),console.log(e.avatar),i.updateProfilePicture(e.avatar).then((e=>{d.setUserInfo({name:e.name,about:e.about,avatar:e.avatar}),m.close()})).catch((e=>{console.error("Error. The request has failed: ",e)})).finally((()=>{m.renderLoading(!1)}))}));m.setEventListeners();const _=new t(a,document.querySelector(".modal__form-avatar"));_.enableValidation(),document.querySelector(".profile__button-edit-avatar").addEventListener("click",(()=>{m.open(),_.toggleSubmitButton()}));const v=document.querySelector(".modal__form-profile"),E=document.querySelector('[name = "name"]'),L=document.querySelector('[name = "about"]'),k=new t(a,v);k.enableValidation(),document.querySelector(".profile__button-edit").addEventListener("click",(()=>{const{userName:e,userAbout:t}=d.getUserInfo();E.value=e,L.value=t,u.open(),k.toggleSubmitButton()}));const p=new o(".modal-add",(e=>{p.renderLoading(!0),i.addNewCard(e).then((e=>{h.addItem(b(e)),p.close()})).catch((e=>{console.error("Error. The request has failed: ",e)})).finally((()=>{p.renderLoading(!1)}))}));p.setEventListeners();const S=new t(a,document.querySelector(".modal__form-add"));function b(t){const s=new e(t,c,"#card",(()=>{n.open(s.getCardData())}),(e=>{l.open(),l.setSubmitHandler((()=>{l.renderLoading(!0),i.deleteCard(e).then((()=>{s.deleteCard(),l.close()})).catch((e=>{console.error("Error. The request has failed: ",e)})).finally((()=>{l.renderLoading(!1)}))}))}),(()=>{i.toggleCardLike(s.getCardData().id,s.getCardData().isLiked).then((e=>{s.setIsLiked(e.likes),s.toggleActiveLike(),s.updateLikeAmount(e.likes)})).catch((e=>{console.error("Error. The request has failed: ",e)}))})),r=s.getCardElement();return t.owner._id!==c&&s.disableDeleteButton(),r}S.enableValidation(),document.querySelector(".profile__button-add").addEventListener("click",(()=>{p.open(),S.toggleSubmitButton()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,